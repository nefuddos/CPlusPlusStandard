Lists这种数据结构是基于双向链表的，所以呢，不支持随机存取，也不提供下标(subscript)操作符，也不提供at()
不提供容量，空间重新分配等操作函数，因为全无必要，每个元素都有自己的内存，在被删除之前，一直有效
使用List时候，必须含入头文件<list>
#include <list>
Lists的操作函数

//生成，复制，销毁
list<Elem> c 产生一个空的List
list<Elem> c1(c2) 产生一个同型的list
list<Elem> c(n) 产生拥有n个元素的list,且以默认的构造函数进行初始化
list<Elem> c(n,elem) 产生拥有n个元素的list,且以elem进行赋值
list<Elem> c(beg,end) 产生一个以[beg,end]区间的元素为初值
c.~list<Elem>() 销毁所有的元素，释放内存

//非变动性操作
c.size()
c,empty()
c.max_size()
c1 == c2
c1 != c2
c1 < c2
c1 > c2
c1 <= c2
c1 >= c2

//赋值
c1 = c2
c.assign(n,elem) 赋值操作
c.assign(beg,end) 将区间[beg,end]的元素赋给c
c1.swap(c2)
swap(c1,c2)

//元素存取
c.front()
c.back()

//迭代器相关函数
c.begin()
c.end()
c.rbegin()
c.rend()

//元素的插入和删除
c.insert(pos,elem)
c.insert(pos,n,elem)
c.insert(pos,beg,end)
c.push_back(elem)
c.pop_back()
c.push_front(elem)
c.pop_front()
c.remove(val) 移除所有其值为val的元素
c.remove_if(op) \\?
c.erase(pos) 移除迭代器所指的元素，返回下一个元素的位置
c.erase(beg,end) 移除指定区间的所有的元素
c.resize(num) 
c.resize(num,elem)
c.clear()

//remove()函数和remove_of(op)函数的区别

//Splice函数
c.unique() 如果存在若干个相邻数值相等的元素，就移除重复元素，只留下一个
c.unique(op)  op为true,则移除
c1.splice(pos,c2) 将c2所有的元素移动到c1以内，pos之前
c1.splice(pos,c2,c2pos) 将c2 c2pos所指的元素移动到c1的pos位置上(c1,c2可以相同)
c1.splice(pos,c2,c2beg,c2end) c2的指定区间移动(c1,c2可以相同)
c.sort() 按照 ‘<’ 进行排序
c.sort(op) 以op()为准则，对所有的元素排序
c1.merge(c2)  c2以有序的方式移动到c1
c1.merge(c1,op) 以op原则有序
c.reverse() 将所有的元素反序(reverse the order)



